<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="shortcut Icon0" href="%PUBLIC_URL%/favicon.ico">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="theme-color" content="#000000">
  <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css"
    integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossOrigin="anonymous" />
  <link href="css/footballMainAlt.css" rel="stylesheet">
  <script src="http://code.jquery.com/jquery.min.js"></script>
  <script src="http://code.jquery.com/ui/1.8.17/jquery-ui.min.js"></script>
  <script src="js/analytics.js"></script>
  <style type="text/css">
    #myCanvas {
      background-image: "img/footballField.jpg";
      background-size: 100% 100%;
      background-position: center;
    }
    #undoButton:active {
      transform: translateY(4px);
    }

    #redoButton:active {
      transform: translateY(4px);
    }

    #saveButton:active {
      transform: translateY(4px);
    }

    #playButton:active {
      transform: translateY(4px);
    }

    #drawButton:active {
      transform: translateY(4px);
    }

    #backButton:active {
      transform: translateY(4px);
    }

    #undoButton2:active {
      transform: translateY(4px);
    }

    #redoButton2:active {
      transform: translateY(4px);
    }

    #saveButton2:active {
      transform: translateY(4px);
    }

    #playButton2:active {
      transform: translateY(4px);
    }

    #drawButton2:active {
      transform: translateY(4px);
    }

    #backButton2:active {
      transform: translateY(4px);
    }
    
    #continue:active {
      transform: translateY(7px);
    }

    #create:active {
      transform: translateY(7px);
    }

    #cancel:active {
      transform: translateY(7px);
    }

    #saveOverlay {
      font-family: Arial, Helvetica, sans-serif;
      position: fixed;
      width: 100%;
      height: 100%;
      top: 0px;
      left: 0px;
      z-index: 1000;
    }

    .button {
      -webkit-transition-duration: 0.4s;
      /* Safari */
      transition-duration: 0.4s;
      overflow: hidden;
    }

    #saveBox {
      font-size: 1.5em;
      top: 50%;
      margin-top: 2em;
    }

    #save_playbook {
      width: 10em;
      border-radius: 4px;
      border: 1px solid black;
    }

    #continue {
      background-color: #ff1e07;
      color: white;
      text-decoration: none;
      border-radius: 4px;
      border: 1px solid black;
      cursor: pointer;
    }

    #create {
      background-color: #ff1e07;
      color: white;
      text-decoration: none;
      border-radius: 4px;
      border: 1px solid black;
      cursor: pointer;
    }

    #cancel {
      margin-bottom: 2vh;
      background-color: white;
      text-decoration: none;
      border-radius: 4px;
      border: 1px solid black;
      cursor: pointer;
    }
  </style>
  <script>
    var dataArr = [];
    var user_index = "";
    var playbook_index = "";
    var play_index = "";
    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
      }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-135010880-1', 'auto');
    ga('send', 'pageview');
  </script>
  <script type="text/javascript">
    function zoomOutMobile() {
      var viewport = document.querySelector('meta[name="viewport"]');
      if ( viewport ) {
        viewport.content = "initial-scale=1";
        viewport.content = "width=device-width";
      }
    }
    zoomOutMobile();
    screen.orientation.lock("landscape-primary");
  </script>
</head>

<body background="img/backgroundPic.png" style="background-size: cover;" onload="InitThis()">
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
   <script type="text/javascript">
    var cPushArray = new Array();
    var cStep = -1;
    var mousePressed = false;
    var lastX, lastY;
    var ctx;
    var canDraw = false;
    var firstSave = true;

    function spawnPlayers() {
      $.getJSON('user.json', function (data) {
        dataArr = data;
        console.log(data.users[0]);
        console.log("spawn: " + data.users[0].logged);
        $.each(data.users, function (i, user) {
          if (user.logged == "true" && user.preferences[0].check == "checked") {
            user_index = i;
            $.each(user.playbooks, function (j, playbook) {
              if (playbook.selected == "true") {
                playbook_index = j;
                $.each(playbook.plays, function (k, play) {
                  if (play.selected == "true") {
                    play_index = k;
                    $.each(play.positions, function (l, position) {
                      $("#field").append('<div class="player" id="player' + l + '" onclick="dragElement(this)" ontouchstart="dragElementTouch(this)" style="position: absolute;z-index: 9; top: ' + position.top + '; left: ' + position.left + '"><img src="img/circle.png" style="width:25px; height:25px; background: ' + position.color + '; border-radius:12.5px"><div style="color: white; transform: translate(0, -100%)">' + position.num + '</div></div>');
                      dragElement(document.getElementById("player" + l));
                      dragElementTouch(document.getElementById("player" + l));
                    });
                  }
                });
              }
            });
          }
        });
        getPlaybooks2(dataArr.users[user_index].playbooks.length);

      }).error(function () {
        console.log('error');
      });
    }

    function spawnDiffPlayers(playbook, play) {
      var loc = dataArr.users[user_index].playbooks[playbook].plays[play];
      drawImage(loc.imgsrc);
      for (var i = 0; i <= 21; i++) {
        console.log("spawning");
        document.getElementById('player' + i).num = loc.positions[i].num;
        document.getElementById('player' + i).style.top = loc.positions[i].top;
        document.getElementById('player' + i).style.left = loc.positions[i].left;
        document.getElementById('player' + i).style.color = loc.positions[i].color;
      }
      play_index = play;
      playbook_index = playbook;
    }

    function savePlay(n, overwrite, index, playbook_i) {
      var newPlay = {
        name: "",
        selected: "false",
        imgsrc: "",
        positions: []
      }

      var c = document.getElementById('myCanvas');
      if (c) {
        var dataURL = c.toDataURL('image/jpg');
        newPlay.imgsrc = dataURL;
      }

      newPlay.name = n;

      for (var i = 0; i <= 21; i++) {
        var pos = $("#player" + i);
        var p = {
          num: "",
          top: "",
          left: "",
          color: ""
        }
        p.num = dataArr.users[user_index].playbooks[playbook_index].plays[play_index].positions[i].num;
        p.top = pos.position().top + "px";
        p.left = pos.position().left + "px";
        if (i > 10) {
          p.color = "blue";
        }
        else {
          p.color = "red";
        }
        newPlay.positions.push(p);
      }
      if (overwrite) {
        dataArr.users[user_index].playbooks[playbook_i].plays.splice(index, 1);
        $('.play2 option').each(function () {
          $(this).remove();
        });
        getPlays2(dataArr.users[user_index].playbooks[playbook_i].plays.length);
      }
      dataArr.users[user_index].playbooks[playbook_i].plays.push(newPlay);
      if (playbook_i == playbook_index) {
        $("#play2").append($("<option/>", {
          value: dataArr.users[user_index].playbooks[playbook_i].plays.length - 1,
          text: newPlay.name
        }));
      }
      $('saveOverlay').fadeOut();
    }

     function InitThis() {
      var tempPlay = $("#play2").val();
      var tempPlaybook = $("#playbook2").val();
      if (tempPlay == "" && tempPlaybook == tempPlay) {
        document.getElementById('playButton2').setAttribute("style", "filter: grayscale(100%);");
      }
      $('#saveOverlay').fadeOut();
      spawnPlayers();

      ctx = document.getElementById('myCanvas').getContext("2d");

      $('#myCanvas').mousedown(function (e) {
        //console.log("mouse Started drawing");
        mousePressed = true;
        Draw(e.pageX - $(this).offset().left, e.pageY - $(this).offset().top, false);
      });

      $('#myCanvas').mousemove(function (e) {
        //console.log("mouse Moving");
        if (mousePressed) {
          Draw(e.pageX - $(this).offset().left, e.pageY - $(this).offset().top, true);
        }
      });

      $('#myCanvas').mouseup(function (e) {
        if (mousePressed) {
          //console.log("mouse drawing ended");
          mousePressed = false;
          if (canDraw) {
            cPush();
          }
        }
      });
      $('#myCanvas').mouseleave(function (e) {
        if (mousePressed) {
          //console.log("mouse left");
          mousePressed = false;
          if (canDraw) {
            cPush();
          }
        }
      });

      $('#myCanvas').on('touchstart', function (e) {
        //console.log("Started drawing");
        mousePressed = true;
        Draw(e.originalEvent.changedTouches[0].pageX - $(this).offset().left, e.originalEvent.changedTouches[0].pageY - $(this).offset().top, false);
      });

      $('#myCanvas').on('touchmove', function (e) {
        //console.log("Moving fing");
        if (mousePressed) {
          Draw(e.originalEvent.changedTouches[0].pageX - $(this).offset().left, e.originalEvent.changedTouches[0].pageY - $(this).offset().top, true);
        }
      });

      $('#myCanvas').on('touchend', function (e) {
        //console.log("drawing ended");
        mousePressed = false;
        if (canDraw) {
          cPush();
        }
      });
      $('#myCanvas').on('touchcancel', function (e) {
        mousePressed = false;
        if (canDraw) {
          cPush();
        }
      });

      $.getJSON('user.json', function (data) {

        drawImage(dataArr.users[user_index].playbooks[playbook_index].plays[play_index].imgsrc);
      }).error(function () {
        console.log('error');
      });
    }

    function drawImage(imgsrc) {
      cPushArray = new Array();
      cStep = -1;
      var image = new Image();
      image.src = imgsrc;
      $(image).load(function () {
        ctx.drawImage(image, 0, 0, 450, 800);
        cPush();
        document.getElementById('redoButton2').setAttribute("style", "filter: grayscale(100%);");
        document.getElementById('undoButton2').setAttribute("style", "filter: grayscale(100%);");
      });
    }
    
    function setCanDraw() {
      canDraw = !canDraw;
      if (!canDraw) {
        document.getElementById("drawButton").setAttribute("style", "filter: saturate(1);");
      }
      else {
        document.getElementById("drawButton").setAttribute("style", "filter: saturate(3);");
      }
    }

    function setCanDraw2() {
      canDraw = !canDraw;
      if (!canDraw) {
        document.getElementById("drawButton2").setAttribute("style", "filter: saturate(1);");
        var items = document.getElementsByClassName('player');
        for (var i = 0; i < items.length; i++) {
          items[i].style.pointerEvents = 'auto';
        }
      }
      else {
        document.getElementById("drawButton2").setAttribute("style", "filter: saturate(3);");
        var items = document.getElementsByClassName('player');
        for (var i = 0; i < items.length; i++) {
          items[i].style.pointerEvents = 'none';
        }
      }
    }

    function Draw(x, y, isDown, e) {
      if (isDown && canDraw) {
        e = e || window.event;
        e.preventDefault();
        ctx.beginPath();
        ctx.strokeStyle = $('#selColor').val();
        ctx.lineWidth = $('#selWidth').val();
        ctx.strokeStyle = $('#selColor2').val();
        ctx.lineWidth = $('#selWidth2').val();
        ctx.lineJoin = "round";
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(x, y);
        ctx.closePath();
        ctx.stroke();
      }
      lastX = x; lastY = y;
    }

    function clearArea() {
      // Use the identity matrix while clearing the canvas
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    }

    var cPushArray = new Array();
    var cStep = -1;

    function cPush() {
      //console.log("Pushed");
      cStep++;
      if (cStep < cPushArray.length) { cPushArray.length = cStep; }
      cPushArray.push(document.getElementById('myCanvas').toDataURL());
      //document.title = cStep + ":" + cPushArray.length;
      document.getElementById('redoButton2').setAttribute("style", "filter: grayscale(100%);");
      if (cStep >= 0) {
        document.getElementById('undoButton2').setAttribute("style", "filter: grayscale(0%);");
      }
    }

    function cUndo() {
      //console.log("Undo");
      if (cStep > 0) {
        cStep--;
        var canvasPic = new Image();
        canvasPic.src = cPushArray[cStep];
        canvasPic.onload = function () { ctx.drawImage(canvasPic, 0, 0); }
        //document.title = cStep + ":" + cPushArray.length;
        if (cStep == 0) {
          document.getElementById('undoButton2').setAttribute("style", "filter: grayscale(100%);");
        }
        if (cStep < cPushArray.length) {
          document.getElementById('redoButton2').setAttribute("style", "filter: grayscale(0%);");
        }
      }
    }

    function cRedo() {
      //console.log("redo");
      if (cStep < cPushArray.length - 1) {
        cStep++;
        var canvasPic = new Image();
        canvasPic.src = cPushArray[cStep];
        canvasPic.onload = function () { ctx.drawImage(canvasPic, 0, 0); }
        //document.title = cStep + ":" + cPushArray.length;
        if (cStep >= 0) {
          document.getElementById('undoButton2').setAttribute("style", "filter: grayscale(0%);");
        }
        if (cStep == cPushArray.length - 1) {
          document.getElementById('redoButton2').setAttribute("style", "filter: grayscale(100%);");
        }
      }
    }

    function dragElement(elmnt) {
      var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
      if (document.getElementById(elmnt.id)) {
        /* if present, the header is where you move the DIV from:*/
        document.getElementById(elmnt.id).onmousedown = dragMouseDown;
      } else {
        /* otherwise, move the DIV from anywhere inside the DIV:*/
        elmnt.onmousedown = dragMouseDown;
      }

      function dragMouseDown(e) {
        console.log("Moving element " + elmnt.id);
        e = e || window.event;
        e.preventDefault();
        // get the mouse cursor position at startup:
        pos3 = e.clientX;
        pos4 = e.clientY;
        document.onmouseup = closeDragElement;
        // call a function whenever the cursor moves:
        document.onmousemove = elementDrag;
      }

      function elementDrag(e) {
        if (!canDraw) {
          console.log("Dragging mouse")
          e = e || window.event;
          e.preventDefault();
          // calculate the new cursor position:
          pos1 = pos3 - e.clientX;
          pos2 = pos4 - e.clientY;
          pos3 = e.clientX;
          pos4 = e.clientY;
          // set the element's new position:
          elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
          elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
        }
      }

      function closeDragElement() {
        /* stop moving when mouse button is released:*/
        console.log("Element let go mouse");
        document.onmouseup = null;
        document.onmousemove = null;
        document.onmousedown = null;
      }
    }

    function dragElementTouch(elmnt) {
      var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
      if (document.getElementById(elmnt.id)) {
        /* if present, the header is where you move the DIV from:*/
        document.getElementById(elmnt.id).ontouchstart = dragMouseDownTouch;
      } else {
        /* otherwise, move the DIV from anywhere inside the DIV:*/
        elmnt.ontouchstart = dragMouseDownTouch;
      }

      function dragMouseDownTouch(e) {
        console.log(elmnt.id + ", drag");
        e = e || window.event;
        e.preventDefault();
        // get the mouse cursor position at startup:
        pos3 = e.touches[0].clientX;
        pos4 = e.touches[0].clientY;
        document.ontouchend = closeDragElementTouch;
        // call a function whenever the cursor moves:
        document.ontouchmove = elementDragTouch;
      }

      function elementDragTouch(e) {
        if (!canDraw) {
          console.log(elmnt.id + ", new");
          e = e || window.event;
          e.preventDefault();
          // set the element's new position:
          elmnt.style.top = (e.touches[0].pageY - 12.5) + "px";
          elmnt.style.left = (e.touches[0].pageX - 12.5) + "px";
          if (elmnt.style.top > e.touches[0].clientY) {
            elmnt.style.top = e.touches[0].clientY;
          }
          if (elmnt.style.left > e.touches[0].clientX) {
            elmnt.style.left = e.touches[0].clientX;
          }
          if (elmnt.style.top < 0) {
            elmnt.style.top = 0;
          }
          if (elmnt.style.left < 0) {
            elmnt.style.top = 0;
          }
        }
      }

      function closeDragElementTouch() {
        /* stop moving when mouse button is released:*/
        console.log("Element let go touch");
        document.touchend = null;
        document.ontouchmove = null;
        document.ontouchstart = null;
      }
    }
  </script>
  <div id="overlay">
    <h3 id="msg">Flip Screen Horizontally</h3>
  </div>
  <div id="saveOverlay" style="background-color: white;"></div>

  <div id="topButtons" style="text-align: center; z-index: 999">
    <button id="backButton" type="button" onclick="window.location.href='/homeAlt'"><img src="img/backButton.png"
        height="55px" width="55px"></button>
    <select id="playbook" name="playbook" 
      style="margin-top: 10px; background-color: white; text-decoration: none; border-radius: 4px; border: 1px solid black;">
      <option value="" selected disabled hidden>Select Playbook</option>
      {{#each users}}
      {{#each playbooks}}
      <option value="{{name}}">{{name}}</option>
      {{/each}}
      {{/each}}
    </select>
    <select id="play" name="play"
      style="margin-top: 10px; background-color: white; text-decoration: none; border-radius: 4px; border: 1px solid black;">
      <option value="" selected disabled hidden>Select Play</option>
    </select>

    <script type="text/javascript">
     function getPlaybooks2(playbooks_len) {
        for (var i = 0; i < playbooks_len; i++) {
          $("#playbook2").append($("<option/>", {
            value: i,
            text: dataArr.users[user_index].playbooks[i].name
          }));
        }
      }

      function refreshPlays2() {
        $('.play2 option').each(function () {
          $(this).remove();
        });
        var newPlaybookVal = $('#playbook2').val();
        var emergedPlayVal = $('#play2').val();
        for (var i = 0; i < dataArr.users[user_index].playbooks[newPlaybookVal].plays.length; i++) {
          console.log("working " + i);
          $("#play2").append($("<option/>", {
            value: i,
            text: dataArr.users[user_index].playbooks[newPlaybookVal].plays[i].name
          }));
        }
        console.log(newPlaybookVal+" "+playbook_index);
        console.log(emergedPlayVal+" "+play_index);
        if(playbook_index == newPlaybookVal && emergedPlayVal == play_index){
          document.getElementById('playButton2').setAttribute("style", "filter: grayscale(100%);");
        }
        else{
          document.getElementById('playButton2').setAttribute("style", "filter: grayscale(0%);");
       }
      }

      function getPlays2(plays_len) {
        for (var i = 0; i < plays_len; i++) {
          $("#play2").append($("<option/>", {
            value: i,
            text: dataArr.users[user_index].playbooks[playbook_index].plays[i].name
          }));
        }
      }                     
    </script>


    <button id="playButton" type="button" onclick="playWindow()"><img src="img/showButton.png" height="25px"
        width="55px"></button>
    <button id="saveButton" type="button" onclick="saveWindow()"><img src="img/saveButton.jpg" height="55px"
        width="55px"></button>
  </div>
  
  <div id="topButtons2" style="text-align: center; z-index: 999">
    <button id="backButton2" type="button" onclick="window.location.href='/homeAlt'"><img src="img/backButton.png"
        height="55px" width="55px"></button>
    <select id="playbook2" name="playbook" onchange="refreshPlays2()"
      style="background-color: white; text-decoration: none; border-radius: 4px; border: 1px solid black;">
      <option value="" selected disabled hidden>Select Playbook</option>
    </select>
    <select id="play2" name="play" class="play2"
      style="background-color: white; text-decoration: none; border-radius: 4px; border: 1px solid black;">
      <option value="" selected disabled hidden>Select Play</option>
     
    </select>

    <button id="playButton2" type="button" onclick="playWindow2()"><img src="img/showButton.png" height="55px"
        width="55px"></button>

    <button id="undoButton2" onclick="cUndo()" type="button"><img src="img/undoButton.png" height="55px"
        width="55px"></button>
  </div>

  <div id="container" style="text-align:center" style="position: relative">
    <div id="field">
      <div align="center">
        <canvas id="myCanvas" width="440vw" height="800vh" style="border:2px solid black"></canvas>
      </div>
    </div>
  </div>
  
  <div id="bottomButtons" style="text-align: center; z-index: 999">
    <button id="redoButton" onclick="cRedo()" type="button"><img src="img/redoButton.png" height="55px"
        width="55px"></button>
    <button id="undoButton" onclick="cUndo()" type="button"><img src="img/undoButton.png" height="55px"
        width="55px"></button>
    <button id="drawButton" type="button" onclick="setCanDraw()"><img src="img/pencil.jpg" height="55px"
        width="55px"></button>
    <select id="selColor"
      style="background-color: white; text-decoration: none; border-radius: 4px; border: 1px solid black;">
      <option value="black">black</option>
      <option value="blue">blue</option>
      <option value="red">red</option>
      <option value="green">green</option>
      <option value="yellow" selected="selected">yellow</option>
      <option value="gray">gray</option>
    </select>
    <select id="selWidth"
      style="background-color: white; text-decoration: none; border-radius: 4px; border: 1px solid black;">
      <option value="1">1</option>
      <option value="3">3</option>
      <option value="5">5</option>
      <option value="7">7</option>
      <option value="9" selected="selected">9</option>
      <option value="11">11</option>
    </select>
  </div>

   <div id="bottomButtons2" style="text-align: center; z-index: 999">
    <button id="saveButton2" type="button" onclick="saveWindow()"><img src="img/saveButton.jpg" height="55px"
        width="55px"></button>
     <button id="drawButton2" type="button" onclick="setCanDraw2()"><img src="img/pencil.jpg" height="55px"
        width="55px"></button>
    <select id="selColor2"
      style="background-color: white; text-decoration: none; border-radius: 4px; border: 1px solid black;">
      <option value="black">black</option>
      <option value="blue">blue</option>
      <option value="red">red</option>
      <option value="green">green</option>
      <option value="yellow" selected="selected">yellow</option>
      <option value="gray">gray</option>
    </select>
    <select id="selWidth2"
      style="background-color: white; text-decoration: none; border-radius: 4px; border: 1px solid black;">
      <option value="1">1</option>
      <option value="3">3</option>
      <option value="5">5</option>
      <option value="7">7</option>
      <option value="9" selected="selected">9</option>
      <option value="11">11</option>
    </select>
     <button id="redoButton2" onclick="cRedo()" type="button"><img src="img/redoButton.png" height="55px"
        width="55px"></button>
  </div>

  <script>
    function savePlaybook(phase) {
      if (phase == 1) {
        $('#save_playbook option').each(function () {
          $(this).remove();
        });
        for (var i = 0; i < dataArr.users[user_index].playbooks.length; i++) {
          $('#save_playbook').append($("<option/>", {
            value: i,
            text: dataArr.users[user_index].playbooks[i].name
          }));
        }
        $('#saveOverlay').fadeIn();
      }
      if (phase == 2) {
        var i = 0;
        var dupe = false;
        var next = dataArr.users[user_index].playbooks.length + 1;
        $('#save_playbook option').each(function () {
          $(this).remove();
        });
        $('#saveOverlay').fadeOut();
        var n = prompt("Please enter a name for this playbook", "Playbook_" + next);
        if (n == null) {
          return;
        }
        while (i < dataArr.users[user_index].playbooks.length) {
          if (dataArr.users[user_index].playbooks[i].name == n) {
            dupe = true;
            break;
          }
          i++;
        }
        if (!dupe) {
          var newPlaybook = {
            name: n,
            selected: "false",
            plays: []
          }
          dataArr.users[user_index].playbooks.push(newPlaybook);
          
          
          
          $("#playbook2").append($("<option/>", {
            value: dataArr.users[user_index].playbooks.length - 1,
            text: newPlaybook.name
          }));
          saveWindowHelper(dataArr.users[user_index].playbooks.length - 1);
        }
        else {
          recursiveSavePlaybook(n, next, i);
        }
      }
      if (phase == 3) {
        $('#saveOverlay').fadeOut();
        saveWindowHelper($('#save_playbook').val());
        $('#save_playbook option').each(function () {
          $(this).remove();
        });
      }
      if (phase == 4) {
        $('#save_playbook option').each(function () {
          $(this).remove();
        });
        $('#saveOverlay').fadeOut();
      }
    }

    function saveWindowHelper(playbook_value) {
      console.log("playbook_value: " + playbook_value);
      var i = 0;
      var dupe = false;
      var next = dataArr.users[user_index].playbooks[playbook_value].plays.length + 1;
      var n = prompt("Please enter a name for this play", "Play_" + next);
      if (n == null) {
        return;
      }
      while (i < dataArr.users[user_index].playbooks[playbook_value].plays.length) {
        if (dataArr.users[user_index].playbooks[playbook_value].plays[i].name == n) {
          dupe = true;
          break;
        }
        i++;
      }
      if (!dupe) {
        savePlay(n, false, null, playbook_value);
      }
      else {
        recursiveSave(n, next, i, playbook_value);
      }
    }

    function saveWindow() {
      if (firstSave) {
        $('#saveOverlay').append('<div id="saveBox" style="text-align: center"><h4 style="margin-bottom:2em;">Select a playbook to save into</h4><div style="margin-bottom: 3em;"><select id="save_playbook" style="top: 50%; left: 50%;"></select><label style="padding-left: 3vw"/><button id="continue" class="button" onclick="savePlaybook(3)" style="top: 50%; left: 50%;">Continue</button></div><h4 style="margin-bottom:2em;">Or</h4><button id="cancel" class="button" onclick="savePlaybook(4)" style="top: 50%; left: 50%;">Cancel Save</button><label style="padding-left: 3vw"/><button id="create" class="button" onclick="savePlaybook(2)" style="top: 50%; left: 50%;">Create New Playbook</button></div>');
        firstSave = false;
      }
      savePlaybook(1);
    }

    function recursiveSave(n, next, i, playbook_value) {
      var a = confirm("Overwrite play?");
      if (a) {
        savePlay(n, true, i, playbook_value);
      }
      else {
        var nn = prompt("Please enter a different name for this play", "Play_" + next);
        if (nn == null) {
          return;
        }
        if (n == nn) {
          recursiveSave(nn, next, i, playbook_value);
        }
        else {
          savePlay(nn, false, null, playbook_value);
        }
      }
    }

    function recursiveSavePlaybook(n, next, i) {
      var a = confirm("Overwrite playbook?");
      if (a) {
        savePlaybook(n, true, i);
      }
      else {
        var nn = prompt("Please enter a different name for this playbook", "Playbook_" + next);
        if (nn == null) {
          return;
        }
        if (n == nn) {
          recursiveSavePlaybook(nn, next, i);
        }
        else {
          var newPlaybook = {
            name: nn,
            selected: "false",
            plays: []
          }
          dataArr.users[user_index].playbooks.push(newPlaybook);
          $("#save_playbook").append($("<option/>", {
            value: dataArr.users[user_index].playbooks.length - 1,
            text: newPlaybook.name
          }));
          savePlay(nn, false, null, dataArr.users[user_index].playbooks.length - 1);
        }
      }
    }

    function eraserWindow() {
      confirm("Placeholder for eraser functionality");
    }
  </script>
  <script>
    function playWindow() {
      var target = $('#play').val();
      dataArr.users[user_index].playbooks[playbook_index].plays[play_index].selected = "false";
      dataArr.users[user_index].playbooks[playbook_index].plays[target].selected = "true";
      console.log(dataArr);
      spawnDiffPlayers(target);
    }
    function playWindow2() {
      var playbook_target = $('#playbook2').val();
      var play_target = $('#play2').val();
      dataArr.users[user_index].playbooks[playbook_index].selected = "false";
      dataArr.users[user_index].playbooks[playbook_target].selected = "true";
      dataArr.users[user_index].playbooks[playbook_index].plays[play_index].selected = "false";
      dataArr.users[user_index].playbooks[playbook_index].plays[play_target].selected = "true";
      spawnDiffPlayers(playbook_target, play_target);
    }
  </script>
  <script>
    function drawWindow() {
      confirm("Placeholder for draw button use");
    }
  </script>
  <script>
    function openUp() {
      document.getElementById("collapsible").style.display = "block";
    }

    function closeUp() {
      document.getElementById("collapsible").style.display = "none";
    }
  </script>
  <script src="/js/footballFetch.js"></script>
</body>

</html>
